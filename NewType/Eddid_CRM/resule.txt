============================= test session starts =============================
platform win32 -- Python 3.6.0, pytest-4.0.0, py-1.7.0, pluggy-0.8.0
rootdir: D:\Test\NewType\NewType\Eddid_CRM, inifile:
plugins: metadata-1.8.0, html-1.21.1, allure-adaptor-1.7.10
collected 71 items

test_case\test_Login.py .                                                [  1%]
test_case\ReviewProcess\test_reviewProcess01.py ......                   [  9%]
test_case\ReviewProcess\test_reviewProcess02.py .....                    [ 16%]
test_case\ReviewProcess\test_reviewProcess03.py Fxxx                     [ 22%]
test_case\ReviewProcess\test_reviewProcess04.py ..                       [ 25%]
test_case\ReviewProcess\test_reviewProcess05.py .F                       [ 28%]
test_case\ReviewProcess\test_reviewProcess06.py .F                       [ 30%]
test_case\ReviewProcess\test_reviewProcess07.py .F                       [ 33%]
test_case\ReviewProcess\test_reviewProcess08.py .F                       [ 36%]
test_case\ReviewProcess\test_reviewProcess09.py .F                       [ 39%]
test_case\ReviewProcess\test_reviewProcess10.py .F                       [ 42%]
test_case\ReviewProcess\test_reviewProcess11.py .F                       [ 45%]
test_case\ReviewProcess\test_reviewProcess12.py .F                       [ 47%]
test_case\ReviewProcess\test_reviewProcess13.py .F                       [ 50%]
test_case\ReviewProcess\test_reviewProcess14.py .                        [ 52%]
test_case\addApply\test_addApplyAllNotEmpty.py FFF                       [ 56%]
test_case\addApply\test_addApplyDerivativeProduct.py FFFFFFFFFFFFF       [ 74%]
test_case\addApply\test_addApplyInvestmentTarget.py FFF                  [ 78%]
test_case\addApply\test_addApplyRequired.py FF                           [ 81%]
test_case\addApply\test_addApplyRiskTolerance.py FFFFFFFFF               [ 94%]
test_case\lead\test_createActivity.py FF.F                               [100%]

================================== FAILURES ===================================
______________ Test_reviewProcess3.test_01_Process3_cs1torefuse _______________

self = <test_case.ReviewProcess.test_reviewProcess03.Test_reviewProcess3 testMethod=test_01_Process3_cs1torefuse>

    def test_01_Process3_cs1torefuse(self):
        # CS1---Refuse
        self.gm.set_value(apiStatus="reviewing")
        self.gm.set_List("accountType", ["leveragedForeignExchangeAccountMargin", "securitiesCash", "futuresMargin"])
        self.gm.set_value(email=apply_create.apply_create_api())
        publicTool.LoginCRM(self, user='cs1_onedi', psw="Abcd1234")     #先登录
>       globals()["status"] = self.reviewRefuse(email=self.gm.get_value("email"), statusSel="待CS1审批")

test_case\ReviewProcess\test_reviewProcess03.py:25:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:158: in reviewRefuse
    self.assertEqual(self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "页面没有从Apply详情页跳转到list页面")
E   AssertionError: 'http://eddid-bos-uat.ntdev.be/main/apply-detail' != 'http://eddid-bos-uat.ntdev.be/main/apply-list'
E   - http://eddid-bos-uat.ntdev.be/main/apply-detail
E   ?                                          ^^ ---
E   + http://eddid-bos-uat.ntdev.be/main/apply-list
E   ?                                          ^^^
E    : 页面没有从Apply详情页跳转到list页面
---------------------------- Captured stdout call -----------------------------
切换保护罩
------------------------------ Captured log call ------------------------------
apply_create.py            112 INFO     accountType == ['leveragedForeignExchangeAccountMargin', 'securitiesCash', 'futuresMargin']
apply_create.py            113 INFO     apiStatus == reviewing
apply_create.py            118 INFO     /apply/create: 創建的數據為:{'code': 200, 'msg': 'success', 'data': 1}
apply_create.py            120 INFO     新创建数据的[email]为: 6935onedi1210619@qq.com
ReviewProcessTool.py        57 INFO     结束driver
________________ Test_reviewProcess5.test_02_Process5_roadmin _________________

self = <test_case.ReviewProcess.test_reviewProcess05.Test_reviewProcess5 testMethod=test_02_Process5_roadmin>

    def test_02_Process5_roadmin(self):
        # 多角色通过
        if globals()["status"].find("待外汇RO审批") != -1:
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='onedi.admin', psw="Abcd1234")      #先登录
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批")

test_case\ReviewProcess\test_reviewProcess05.py:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146D0D828>
response = {'sessionId': '4d72b8656ae272e4a3b68d1d60ed4d3b', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146CC2B38> 页面中未能找到 ('xpath', '//span[text()="5134onedi1097126@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 4 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 4 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 4 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 4 条记录
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 4 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 4 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 4 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 4 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '5134onedi1097126@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 4 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 4 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 4 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 4 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '5134onedi1097126@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a86d827b4414595962b9e'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a86d827b441cafc962b71'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '5134onedi1097126@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3227613546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '569488656456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165272933.0, 'updatedTime': 1565165272933.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a86d827b441cafc962b71
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a86d827b441cafc962b71')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a86d827b441cafc962b71'), 'isRoRefuse': 'N', 'accountType': ['leveragedForeignExchangeAccountMargin', 'securitiesCash', 'futuresMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a86d827b4414595962b9e')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165318772,46017"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'finish', 'customerSource': 'crm', 'applySeqId': '9430', 'roApprovalList': [{'isApproval': True, '_id': ObjectId('5d4a86d827b4414062962b9c'), 'username': 'don_test', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4411f22962b9b'), 'username': 'ro_don', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4415f13962b9a'), 'username': 'ro1_don', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4414ce5962b99'), 'username': 'ro_one', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4410fb5962b98'), 'username': 'aaron_chan', 'usertype': 'futuressRo', 'isOperate': '1'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4411a61962b97'), 'username': 'onedi.admin', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b441433d962b96'), 'username': 'cliff_test', 'usertype': 'futuressRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4414ef4962b95'), 'username': 'cliff_test', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b441304a962b94'), 'username': 'ro_cliff', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4417383962b93'), 'username': 'ro1_cliff', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b44190b6962b92'), 'username': 'ro_one', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4416507962b91'), 'username': 'aaron_chan', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4410abe962b90'), 'username': 'onedi.admin', 'usertype': 'securitiesRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4414632962b8f'), 'username': 'aaron.chan', 'usertype': 'fouexRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b44137b5962b8e'), 'username': 'aaron_test', 'usertype': 'fouexRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b4419f59962b8d'), 'username': 'ro_one', 'usertype': 'fouexRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b441113a962b8c'), 'username': 'onedi.admin', 'usertype': 'fouexRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b441a504962b8b'), 'username': 'cliff_test', 'usertype': 'fouexRo'}, {'isApproval': True, '_id': ObjectId('5d4a86d827b441e819962b8a'), 'username': 'aaron_chan', 'usertype': 'fouexRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165272755.0, 'createdTime': 1565165272755.0, 'updatedTime': 1565165318772.0, 'remark': '', 'reason': '', 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': ''}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a86d827b4414595962b9e')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a86d827b4414595962b9e')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a86d827b4414595962b9e'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a86d827b441cafc962b71'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '5134onedi1097126@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3227613546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '569488656456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165272933.0, 'updatedTime': 1565165272933.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E8A988>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146CED288>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
_______________ Test_reviewProcess6.test_02_Process6_cstocliff ________________

self = <test_case.ReviewProcess.test_reviewProcess06.Test_reviewProcess6 testMethod=test_02_Process6_cstocliff>

    def test_02_Process6_cstocliff(self):
        if globals()["status"].find("证券RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="信息无误")

test_case\ReviewProcess\test_reviewProcess06.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146D61198>
response = {'sessionId': '21d766aa54c5b7182821e49113054b57', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146D61F28> 页面中未能找到 ('xpath', '//span[text()="6508onedi334796@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 5 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 5 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 5 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 5 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '6508onedi334796@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 5 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 5 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 5 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 5 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '6508onedi334796@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a874027b4412c6b962bd0'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a874027b4415983962bbd'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '6508onedi334796@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3225567546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '5654356456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165376134.0, 'updatedTime': 1565165376134.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a874027b4415983962bbd
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a874027b4415983962bbd')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a874027b4415983962bbd'), 'isRoRefuse': '', 'accountType': ['securitiesCash'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a874027b4412c6b962bd0')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165402494,26462"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9431', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a874027b4414684962bce'), 'username': 'cliff_test', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a874027b4418a34962bcd'), 'username': 'ro_cliff', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a874027b4412985962bcc'), 'username': 'ro1_cliff', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a874027b441ab87962bcb'), 'username': 'ro_one', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a874027b4412117962bca'), 'username': 'aaron_chan', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a874027b4413858962bc9'), 'username': 'onedi.admin', 'usertype': 'securitiesRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165376032.0, 'createdTime': 1565165376032.0, 'updatedTime': 1565165402494.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'ro1_cliff', 'role': 'securitiesRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a874027b4412c6b962bd0')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a874027b4412c6b962bd0')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a874027b4412c6b962bd0'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a874027b4415983962bbd'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '6508onedi334796@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3225567546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '5654356456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165376134.0, 'updatedTime': 1565165376134.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146DDA0C8>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E117C8>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
_______________ Test_reviewProcess7.test_02_Process7_cstoRefuse _______________

self = <test_case.ReviewProcess.test_reviewProcess07.Test_reviewProcess7 testMethod=test_02_Process7_cstoRefuse>

    def test_02_Process7_cstoRefuse(self):
        if globals()["status"].find("证券RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="确定拒绝")

test_case\ReviewProcess\test_reviewProcess07.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146D3E518>
response = {'sessionId': 'e316a13724720b795a9bbb04bba23f9b', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
切换保护罩
切换保护罩
<PageElement.MainPage.MainPage object at 0x000001D146D3E9E8> 页面中未能找到 ('xpath', '//span[text()="8433onedi581954@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 6 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 6 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 6 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 6 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '8433onedi581954@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 6 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 6 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 6 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 6 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '8433onedi581954@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a879486a39c61aca7fe05'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a879486a39c5216a7fdf2'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '8433onedi581954@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3221333546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '565195556456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165460237.0, 'updatedTime': 1565165460237.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a879486a39c5216a7fdf2
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a879486a39c5216a7fdf2')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a879486a39c5216a7fdf2'), 'isRoRefuse': '', 'accountType': ['securitiesCash'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a879486a39c61aca7fe05')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165517854,57935"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9432', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a879486a39c404ba7fe03'), 'username': 'cliff_test', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a879486a39cf16aa7fe02'), 'username': 'ro_cliff', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a879486a39cb575a7fe01'), 'username': 'ro1_cliff', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a879486a39c625ea7fe00'), 'username': 'ro_one', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a879486a39c22ffa7fdff'), 'username': 'aaron_chan', 'usertype': 'securitiesRo'}, {'isApproval': False, '_id': ObjectId('5d4a879486a39c0a69a7fdfe'), 'username': 'onedi.admin', 'usertype': 'securitiesRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165459919.0, 'createdTime': 1565165459919.0, 'updatedTime': 1565165517854.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'ro1_cliff', 'role': 'securitiesRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a879486a39c61aca7fe05')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a879486a39c61aca7fe05')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a879486a39c61aca7fe05'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a879486a39c5216a7fdf2'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '8433onedi581954@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3221333546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '565195556456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165460237.0, 'updatedTime': 1565165460237.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146DBC9C8>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E11CC8>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
________________ Test_reviewProcess8.test_02_Process8_cstodon _________________

self = <test_case.ReviewProcess.test_reviewProcess08.Test_reviewProcess8 testMethod=test_02_Process8_cstodon>

    def test_02_Process8_cstodon(self):
        if globals()["status"].find("期货RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="信息无误")

test_case\ReviewProcess\test_reviewProcess08.py:33:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146D45208>
response = {'sessionId': '77d46f4dc2e950eca4cb0d87ab8122cf', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
切换保护罩
切换保护罩
<PageElement.MainPage.MainPage object at 0x000001D146D30FD0> 页面中未能找到 ('xpath', '//span[text()="2759onedi1233772@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 7 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 7 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 7 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 7 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '2759onedi1233772@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 7 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 7 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 7 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 7 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '2759onedi1233772@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a883186a39c0301a7fe22'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a883186a39cb6eea7fe0d'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '2759onedi1233772@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3224722546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '566482956456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165617517.0, 'updatedTime': 1565165617517.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a883186a39cb6eea7fe0d
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a883186a39cb6eea7fe0d')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a883186a39cb6eea7fe0d'), 'isRoRefuse': '', 'accountType': ['futuresMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a883186a39c0301a7fe22')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165677294,59954"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9433', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a883186a39c00a4a7fe20'), 'username': 'don_test', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39c7d32a7fe1f'), 'username': 'ro_don', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39c0f71a7fe1e'), 'username': 'ro1_don', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39c971ea7fe1d'), 'username': 'ro_one', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39cd94fa7fe1c'), 'username': 'aaron_chan', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39cba68a7fe1b'), 'username': 'onedi.admin', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a883186a39c00fca7fe1a'), 'username': 'cliff_test', 'usertype': 'futuressRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165617340.0, 'createdTime': 1565165617340.0, 'updatedTime': 1565165677294.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'ro1_don', 'role': 'futuressRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a883186a39c0301a7fe22')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a883186a39c0301a7fe22')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a883186a39c0301a7fe22'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a883186a39cb6eea7fe0d'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '2759onedi1233772@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3224722546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '566482956456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165617517.0, 'updatedTime': 1565165617517.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146DEEB88>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E11CC8>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
_______________ Test_reviewProcess9.test_02_Process9_cstoRefuse _______________

self = <test_case.ReviewProcess.test_reviewProcess09.Test_reviewProcess9 testMethod=test_02_Process9_cstoRefuse>

    def test_02_Process9_cstoRefuse(self):
        if globals()["status"].find("期货RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="确定拒绝")

test_case\ReviewProcess\test_reviewProcess09.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146F293C8>
response = {'sessionId': 'dda6b16f1aa0f345099bd10532822ac0', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146F58860> 页面中未能找到 ('xpath', '//span[text()="9321onedi1092309@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 8 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 8 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 8 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 8 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '9321onedi1092309@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 8 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 8 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 8 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 8 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '9321onedi1092309@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a88bf86a39c910ba7fe3f'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a88be86a39c7623a7fe2a'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '9321onedi1092309@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3229546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '56933656456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165759043.0, 'updatedTime': 1565165759043.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a88be86a39c7623a7fe2a
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a88be86a39c7623a7fe2a')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a88be86a39c7623a7fe2a'), 'isRoRefuse': '', 'accountType': ['futuresMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a88bf86a39c910ba7fe3f')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165788374,29473"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9434', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a88be86a39c1c30a7fe3d'), 'username': 'don_test', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39cee6aa7fe3c'), 'username': 'ro_don', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39cf097a7fe3b'), 'username': 'ro1_don', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39c3242a7fe3a'), 'username': 'ro_one', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39c58f3a7fe39'), 'username': 'aaron_chan', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39c4255a7fe38'), 'username': 'onedi.admin', 'usertype': 'futuressRo'}, {'isApproval': False, '_id': ObjectId('5d4a88be86a39c4be9a7fe37'), 'username': 'cliff_test', 'usertype': 'futuressRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165758901.0, 'createdTime': 1565165758901.0, 'updatedTime': 1565165788374.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'ro1_don', 'role': 'futuressRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a88bf86a39c910ba7fe3f')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a88bf86a39c910ba7fe3f')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a88bf86a39c910ba7fe3f'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a88be86a39c7623a7fe2a'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '9321onedi1092309@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3229546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '56933656456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165759043.0, 'updatedTime': 1565165759043.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146CED708>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146CA4388>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
_______________ Test_reviewProcess10.test_02_Process10_cstodon ________________

self = <test_case.ReviewProcess.test_reviewProcess10.Test_reviewProcess10 testMethod=test_02_Process10_cstodon>

    def test_02_Process10_cstodon(self):
        if globals()["status"].find("外汇RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="信息无误")

test_case\ReviewProcess\test_reviewProcess10.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146BFAF28>
response = {'sessionId': 'd60ce7420785dee3aa7b431b0becf431', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146BE20B8> 页面中未能找到 ('xpath', '//span[text()="4952onedi1311962@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '4952onedi1311962@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 9 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 9 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 9 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 9 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '4952onedi1311962@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a891686a39cfd33a7fe5a'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a891686a39c467ca7fe47'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '4952onedi1311962@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3222677546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '564100756456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165846382.0, 'updatedTime': 1565165846382.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a891686a39c467ca7fe47
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a891686a39c467ca7fe47')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a891686a39c467ca7fe47'), 'isRoRefuse': '', 'accountType': ['leveragedForeignExchangeAccountMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a891686a39cfd33a7fe5a')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165884074,37786"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9435', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a891686a39c56e1a7fe58'), 'username': 'aaron.chan', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a891686a39c0144a7fe57'), 'username': 'aaron_test', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a891686a39c8be9a7fe56'), 'username': 'ro_one', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a891686a39c5014a7fe55'), 'username': 'onedi.admin', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a891686a39c19f5a7fe54'), 'username': 'cliff_test', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a891686a39c96c9a7fe53'), 'username': 'aaron_chan', 'usertype': 'fouexRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165846288.0, 'createdTime': 1565165846288.0, 'updatedTime': 1565165884074.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'aaron_chan', 'role': 'fouexRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a891686a39cfd33a7fe5a')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a891686a39cfd33a7fe5a')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a891686a39cfd33a7fe5a'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a891686a39c467ca7fe47'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '4952onedi1311962@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3222677546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '564100756456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165846382.0, 'updatedTime': 1565165846382.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146DDA788>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146D17FC8>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
______________ Test_reviewProcess11.test_02_Process11_cstoRefuse ______________

self = <test_case.ReviewProcess.test_reviewProcess11.Test_reviewProcess11 testMethod=test_02_Process11_cstoRefuse>

    def test_02_Process11_cstoRefuse(self):
        if globals()["status"].find("外汇RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="确定拒绝")

test_case\ReviewProcess\test_reviewProcess11.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146CE1A90>
response = {'sessionId': '39a22f121b82a6ec4f141afb26332de6', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146C635F8> 页面中未能找到 ('xpath', '//span[text()="10013onedi1171617@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 10 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 10 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 10 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 10 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '10013onedi1171617@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 10 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 10 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 10 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 10 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '10013onedi1171617@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a896d86a39cb191a7fe75'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a896d86a39c33bda7fe62'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '10013onedi1171617@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3222644546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '567698256456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165933540.0, 'updatedTime': 1565165933540.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a896d86a39c33bda7fe62
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a896d86a39c33bda7fe62')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a896d86a39c33bda7fe62'), 'isRoRefuse': '', 'accountType': ['leveragedForeignExchangeAccountMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a896d86a39cb191a7fe75')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565165950394,17073"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9436', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a896d86a39c1a03a7fe73'), 'username': 'aaron.chan', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a896d86a39cb3a2a7fe72'), 'username': 'aaron_test', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a896d86a39cc675a7fe71'), 'username': 'ro_one', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a896d86a39c18dfa7fe70'), 'username': 'onedi.admin', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a896d86a39c6188a7fe6f'), 'username': 'cliff_test', 'usertype': 'fouexRo'}, {'isApproval': False, '_id': ObjectId('5d4a896d86a39c8b4aa7fe6e'), 'username': 'aaron_chan', 'usertype': 'fouexRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565165933321.0, 'createdTime': 1565165933321.0, 'updatedTime': 1565165950394.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'aaron_chan', 'role': 'fouexRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a896d86a39cb191a7fe75')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a896d86a39cb191a7fe75')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a896d86a39cb191a7fe75'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a896d86a39c33bda7fe62'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '10013onedi1171617@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3222644546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '567698256456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565165933540.0, 'updatedTime': 1565165933540.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146C79848>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E8AE88>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
_______________ Test_reviewProcess12.test_02_Process12_cstogold _______________

self = <test_case.ReviewProcess.test_reviewProcess12.Test_reviewProcess12 testMethod=test_02_Process12_cstogold>

    def test_02_Process12_cstogold(self):
        if globals()["status"].find("黄金RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email=self.gm.get_value("email"), statusSel="待RO审批", btn_text="信息无误")

test_case\ReviewProcess\test_reviewProcess12.py:34:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146CF4C88>
response = {'sessionId': '4ecf8ee8725863a3a65cbbf26bf00c6f', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
切换保护罩
<PageElement.MainPage.MainPage object at 0x000001D146D0A4E0> 页面中未能找到 ('xpath', '//span[text()="2410onedi1495092@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 11 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 11 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 11 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 11 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '2410onedi1495092@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 11 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 11 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 11 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 11 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '2410onedi1495092@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a89b086a39c3d90a7fe92'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a89b086a39c9231a7fe7d'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '2410onedi1495092@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3223996546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '569211956456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565166000900.0, 'updatedTime': 1565166000900.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a89b086a39c9231a7fe7d
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a89b086a39c9231a7fe7d')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a89b086a39c9231a7fe7d'), 'isRoRefuse': '', 'accountType': ['bullionMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a89b086a39c3d90a7fe92')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565166040534,39773"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9437', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a89b086a39c400ea7fe90'), 'username': 'ro_gold', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39cdfc1a7fe8f'), 'username': 'ro_eb_t1', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39c4092a7fe8e'), 'username': 'aaron_test', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39c2ca8a7fe8d'), 'username': 'onedi.admin', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39c53f0a7fe8c'), 'username': 'cliff_test', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39caa5ba7fe8b'), 'username': 'gold_onedi', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a89b086a39c5d9da7fe8a'), 'username': 'ceci_test', 'usertype': 'bullionRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565166000761.0, 'createdTime': 1565166000761.0, 'updatedTime': 1565166040534.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'gold_onedi', 'role': 'bullionRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a89b086a39c3d90a7fe92')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a89b086a39c3d90a7fe92')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a89b086a39c3d90a7fe92'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a89b086a39c9231a7fe7d'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '2410onedi1495092@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3223996546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '569211956456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565166000900.0, 'updatedTime': 1565166000900.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146C29EC8>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146D1C688>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
______________ Test_reviewProcess13.test_02_Process13_cstoRefuse ______________

self = <test_case.ReviewProcess.test_reviewProcess13.Test_reviewProcess13 testMethod=test_02_Process13_cstoRefuse>

    def test_02_Process13_cstoRefuse(self):
        # print(self.gm.get_value("email"))

        if globals()["status"].find("黄金RO拒绝") == -1 :
            pytest.xfail("数据状态是 {}".format(globals()["status"]))

        publicTool.LoginCRM(self, user='cs_t1')
>       globals()["status"] = self.reviewPass(email = self.gm.get_value("email"), statusSel="待RO审批", btn_text="确定拒绝")

test_case\ReviewProcess\test_reviewProcess13.py:36:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\ReviewProcess\ReviewProcessTool.py:80: in reviewPass
    self.mainpage.get_apply(email=email)
PageElement\MainPage.py:57: in get_apply
    self.script("arguments[0].scrollIntoView();", applylistEmail)
Commons\BasePage.py:118: in script
    self.driver.execute_script(src, loc)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:636: in execute_script
    'args': converted_args})['value']
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146E2B748>
response = {'sessionId': '9fe4578ff1ce7d51e9fa1574cc448b51', 'status': 13, 'value': {'message': 'unknown error: arguments[0].scro...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: arguments[0].scrollIntoView is not a function
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
---------------------------- Captured stdout call -----------------------------
<PageElement.MainPage.MainPage object at 0x000001D146E2B470> 页面中未能找到 ('xpath', '//span[text()="978onedi1446602@qq.com"]/ancestor::td') 元素
------------------------------ Captured log call ------------------------------
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 12 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 12 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 12 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 12 条记录
ReviewProcessTool.py        57 INFO     结束driver
---------------------------- Captured log teardown ----------------------------
ReviewProcessTool.py        38 INFO     删除数据
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     client_info 表符合查询条件{'email': '978onedi1446602@qq.com'} 的数据有0 条
PyMongo.py                  41 INFO     close Client
PyMongo.py                  46 INFO     client_info 表预计删除 2 条记录
PyMongo.py                  46 INFO     users 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply_info 表预计删除 12 条记录
PyMongo.py                  46 INFO     account 表预计删除 2 条记录
PyMongo.py                  46 INFO     apply 表预计删除 12 条记录
PyMongo.py                  50 INFO     client_info 表实际删除 2 条记录
PyMongo.py                  50 INFO     users 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply_info 表实际删除 12 条记录
PyMongo.py                  50 INFO     account 表实际删除 2 条记录
PyMongo.py                  50 INFO     apply 表实际删除 12 条记录
PyMongo.py                  35 INFO     连接数据库uat
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'email': '978onedi1446602@qq.com'} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a8a1886a39c1d79a7feaf'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a8a1886a39c8652a7fe9a'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '978onedi1446602@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3227001546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '566405856456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565166104178.0, 'updatedTime': 1565166104178.0}
PyMongo.py                  81 INFO     apply_info 表关联的字段为 applyId : 5d4a8a1886a39c8652a7fe9a
PyMongo.py                  82 INFO     正在查询关联表 apply 的数据
PyMongo.py                  65 INFO     apply 表符合查询条件{'_id': ObjectId('5d4a8a1886a39c8652a7fe9a')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a8a1886a39c8652a7fe9a'), 'isRoRefuse': '', 'accountType': ['bullionMargin'], 'appBankCardImg': [''], 'applyInfoIds': [ObjectId('5d4a8a1886a39c1d79a7feaf')], 'learnHow': ['lecture'], 'tradingAuthorization': [], 'tradingAuthorizationBak': [''], 'isRelatedAccounts': ['HK'], 'caApplyErr': [], 'reviewTime': ['{"ro":"1565166131174,27092"}'], 'step': '', 'origin': '', 'idpUserId': '', 'applicationFor': 'individual', 'parentId': 'sales_t1', 'IBparentId': '', 'mailLanguage': 'zh-hans', 'accountOpeningWay': 'visitingAccount', 'appBankName': '', 'appBankAccount': '', 'appCertSn': '', 'appCertDn': '', 'accountNumber': '', 'personalInfoDeclartion': 'Y', 'agreeToTheTerms': 'N', 'status': 'csApproval', 'customerSource': 'crm', 'applySeqId': '9438', 'roApprovalList': [{'isApproval': False, '_id': ObjectId('5d4a8a1886a39c7345a7fead'), 'username': 'ro_gold', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39c56b9a7feac'), 'username': 'ro_eb_t1', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39cb3a1a7feab'), 'username': 'aaron_test', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39c1302a7feaa'), 'username': 'onedi.admin', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39c3ea6a7fea9'), 'username': 'cliff_test', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39c1c37a7fea8'), 'username': 'gold_onedi', 'usertype': 'bullionRo'}, {'isApproval': False, '_id': ObjectId('5d4a8a1886a39c64a5a7fea7'), 'username': 'ceci_test', 'usertype': 'bullionRo'}], 'leadId': '', 'isFromLead': False, 'parentPath': '/100000/ceo_t1/sales_t1', 'currency': 'NA', 'bankAccount': [], 'isHongKongBankCard': '', 'isMarginAccount': 'N', 'marginAccountName': '', 'marginAccountNumber': '', 'isDiscretion': 'N', 'discretionName': '', 'discretionNumber': '', 'isCompanyAccounts': 'N', 'companyAccountsName': '', 'companyAccountsNumber': '', 'learnHowCode': '', 'learnHowOther': '', 'isBeneficiary': 'Y', 'beneficiaryName': '', 'isOrders': 'Y', 'ordersName': '', 'relatedAccountsOpt': [], 'referralCode': '', 'signatureCoords': [{'_id': ObjectId('5c3ee2c33dc2063f0894a6dd'), 'pageNo': 13, 'x': 130, 'y': 602}, {'_id': ObjectId('5c3ee2c33dc20649d894a6dc'), 'pageNo': 14, 'x': 130, 'y': 83}, {'_id': ObjectId('5c3ee2c33dc20633a794a6db'), 'pageNo': 16, 'x': 130, 'y': 165}, {'_id': ObjectId('5cc550fbe0d90d746063bac7'), 'pageNo': 15, 'x': 130, 'y': 185}, {'_id': ObjectId('5cc55141e0d90d746063bac8'), 'pageNo': 17, 'x': 130, 'y': 185}], 'signatureSize': {'xDpi': '660', 'yDpi': '660'}, 'submitTime': 1565166104082.0, 'createdTime': 1565166104082.0, 'updatedTime': 1565166131174.0, 'remark': '这是拒绝原因123qaz,./', 'reason': {'applyInfo': ['applicationFor', 'accountOpeningWay', 'parentId', 'mailLanguage', 'referralCode', 'accountType'], 'primaryInfo': ['title', 'firstName', 'lastName', 'chineseName', 'pastEnglishName', 'pastChineseName', 'email', 'phone', 'address', 'addressMail', 'nationality', 'idType', 'idNumber', 'countryIssue', 'birthday', 'birthPlace'], 'employedInfo': ['occupation', 'employment', 'employedPeriod', 'employer', 'businessType', 'businessAddress', 'businessPhone'], 'principalAccountHolderCertificationInformation': ['passportMaterial', 'addressVerificationMaterials', 'writtenApplicationMaterials', 'bankCardMaterials', 'proofOfIncome', 'otherInformation', 'disclaimerVideo'], 'financialInformation': ['totalAnnualCustomerRevenueHK', 'customerNetAssetValueHK', 'sourceOfWealth'], 'customerInvestmentExperience': ['securities', 'CBBC', 'warrants', 'futures', 'options', 'foreignExchange', 'otherInvestmentText'], 'knowTheProduct': ['isLearnAboutProducts', 'isIndustryExperience', 'isStocks', 'isApplyToOpenTradingStructure'], 'otherCustomerInformation': ['isBankruptcy', 'isInAgtJobs', 'isBondFuturesClientsConnected', 'isAcquaintHighLevel', 'isAmericanResidents', 'isAmericanResidentsb', 'isPoliticalFigure', 'purposeOfInvestment', 'riskTolerance'], 'settlementAccountInformation': ['currency'], 'relatedMarginFinancingAccount': ['isMarginAccount', 'isDiscretion', 'isCompanyAccounts'], 'identityDeclaration': ['isBeneficiary', 'isOrders'], 'identificationNumberOfTheSameFunction': ['isRelatedAccounts'], 'introductionAndPromotion': ['learnHow', 'learnHowCode'], 'other': ['szca']}, 'principal': '', 'appBankPhone': '', 'appFileId': '', 'openlocation': '', 'isReSubmit': '', 'signatureFile': '', 'appVersion': '', 'deviceModel': '', 'isContactClient': '', 'reSubmitTime': None, 'accountOpeningTime': None, 'LearnHowCodeOps': '', 'isHideGeneratePdfPage': '', 'isCommonService': '', 'accountOpeningAgreement': '', 'opsProcessing': {}, 'refuseBy': {'name': 'gold_onedi', 'role': 'bullionRo'}}
PyMongo.py                  97 INFO     apply 表关联的字段为 applyInfoIds : [ObjectId('5d4a8a1886a39c1d79a7feaf')]
PyMongo.py                  98 INFO     正在查询关联表 apply_info 的数据
PyMongo.py                  65 INFO     apply_info 表符合查询条件{'_id': ObjectId('5d4a8a1886a39c1d79a7feaf')} 的数据有1 条
PyMongo.py                  67 INFO     {'_id': ObjectId('5d4a8a1886a39c1d79a7feaf'), 'relationWithMaster': '', 'isMaster': '1', 'applyId': ObjectId('5d4a8a1886a39c8652a7fe9a'), 'leadId': '', 'isFromLead': False, 'title': 'mr', 'firstName': '名', 'lastName': '姓', 'chineseName': 'oneditesss', 'email': '978onedi1446602@qq.com', 'phoneAreaCode': 'CHN', 'phone': '3227001546', 'address': '465456456456', 'nationality': 'HKG', 'idType': '2', 'idNumber': '566405856456', 'countryIssue': 'HKG', 'birthday': 947001600000.0, 'birthPlace': 'CHN', 'employment': 'retired', 'occupation': '', 'employedPeriod': '', 'employer': '', 'businessType': '', 'businessAddress': '', 'businessPhone': '', 'riskInfo': {'isApplyToOpenTradingStructure': 'Y', 'isTradingStructureAggree': 'Y', 'isShowTradingStructureAggree': 'Y', 'isShowApplyToOpenTradingStructure': 'Y', 'isShowAlgoTrade': 'N', 'totalAnnualCustomerRevenueHK': 'lt500000', 'customerNetAssetValueHK': 'lt3000000', 'sourceOfWealth': ['selfOperated'], 'futures': '1To5Years', 'securities': 'gt10Years', 'CBBC': '6To10Years', 'warrants': 'gt10Years', 'foreignExchange': 'gt10Years', 'options': '6To10Years', 'bullion': '6To10Years', 'algoTrade': '1To5Years', 'isLearnAboutProducts': 'Y', 'isIndustryExperience': 'Y', 'isStocks': 'Y', 'isBankruptcy': 'Y', 'bankruptcyDate': 1557158400000.0, 'isInAgtJobs': 'N', 'bankruptcyProve': ['1544166106_698802e5bebb842bfaf86bdf74458094.jpg'], 'isBondFuturesClientsConnected': 'N', 'isAcquaintHighLevel': 'N', 'isAmericanResidents': 'N', 'isAmericanResidentsb': 'N', 'isPoliticalFigure': 'N', 'purposeOfInvestment': ['hedging', 'asset'], 'riskTolerance': 'high'}, 'pastEnglishName': '', 'pastChineseName': '', 'idCardAddress': '', 'addressMail': '', 'idTypeOther': '', 'employmentOther': '', 'career': '', 'marriage': '', 'education': '', 'attachment': {}, 'relationWithMasterImmediateFamily': '', 'relationWithMasterOthers': '', 'isReSubmit': '', 'addressRegionProvince': '', 'addressRegionCity': '', 'addressRegionArea': '', 'addressDetailed': '', 'businessAddressRegionProvince': '', 'businessAddressRegionCity': '', 'businessAddressRegionArea': '', 'businessAddressDetailed': '', 'idCardAddressReadOnly': '', 'syncIDAddress': '', 'isHongKongBankCard': '', 'ocrInfo': {}, 'createdTime': 1565166104178.0, 'updatedTime': 1565166104178.0}
PyMongo.py                 110 INFO     apply 表关联的字段为 idpUserId :
PyMongo.py                 111 INFO     正在查询关联表 users 的数据
PyMongo.py                  65 INFO     users 表符合查询条件{'subject': ''} 的数据有0 条
PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146E95D08>
PyMongo.py                 150 INFO     ***********************************

PyMongo.py                 135 INFO     ***********************************

PyMongo.py                 136 INFO     没有关联数据,直接删除apply_info 表
PyMongo.py                 147 INFO     <pymongo.results.DeleteResult object at 0x000001D146C02608>
PyMongo.py                 150 INFO     ***********************************

ReviewProcessTool.py        43 INFO     删除变量
______________ Test_addApplyAllNotEmpty.test_apply_IndividualAll ______________

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_IndividualAll>

    def test_apply_IndividualAll(self):
        self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
        self.RequiredField(applicationFor="个人账户",
>                          type=["香港及环球证券账户(现金)", "香港及环球期货账户(保证金)", "杠杆式外汇账户(保证金)"])

test_case\addApply\test_addApplyAllNotEmpty.py:47:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_IndividualAll>
args = ()
kwargs = {'applicationFor': '个人账户', 'type': ['香港及环球证券账户(现金)', '香港及环球期货账户(保证金)', '杠杆式外汇账户(保证金)']}

    def RequiredField(self, *args, **kwargs):

>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\addApplyTool.py:49: NameError
---------------------------- Captured stdout call -----------------------------
切换保护罩
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
test_addApplyAllNotEmpty.py   45 INFO     正在执行test_apply_IndividualAll函数
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___________ Test_addApplyAllNotEmpty.test_apply_IndividualNotEmpty ____________

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_IndividualNotEmpty>

    def test_apply_IndividualNotEmpty(self):
        self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))

        # 填写apply 必填项
        self.RequiredField(applicationFor="个人账户",
>                          type=["香港及环球证券账户(现金)", "香港及环球期货账户(保证金)", "杠杆式外汇账户(保证金)"])

test_case\addApply\test_addApplyAllNotEmpty.py:24:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_IndividualNotEmpty>
args = ()
kwargs = {'applicationFor': '个人账户', 'type': ['香港及环球证券账户(现金)', '香港及环球期货账户(保证金)', '杠杆式外汇账户(保证金)']}

    def RequiredField(self, *args, **kwargs):

>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\addApplyTool.py:49: NameError
---------------------------- Captured stdout call -----------------------------
切换保护罩
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
test_addApplyAllNotEmpty.py   20 INFO     正在执行test_apply_IndividualNotEmpty函数
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
______________ Test_addApplyAllNotEmpty.test_apply_JointNotEmpty ______________

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_JointNotEmpty>

    def test_apply_JointNotEmpty(self):
        self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
        self.RequiredField(applicationFor = "联名账户",
                           type = ["香港及环球证券账户(现金)", "香港及环球期货账户(保证金)", "杠杆式外汇账户(保证金)"],
>                          buyProduct = True)

test_case\addApply\test_addApplyAllNotEmpty.py:57:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyAllNotEmpty.Test_addApplyAllNotEmpty testMethod=test_apply_JointNotEmpty>
args = ()
kwargs = {'applicationFor': '联名账户', 'buyProduct': True, 'type': ['香港及环球证券账户(现金)', '香港及环球期货账户(保证金)', '杠杆式外汇账户(保证金)']}

    def RequiredField(self, *args, **kwargs):

>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\addApplyTool.py:49: NameError
---------------------------- Captured stdout call -----------------------------
切换保护罩
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
test_addApplyAllNotEmpty.py   54 INFO     正在执行test_apply_JointNotEmpty函数
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyDerivativeProduct.test_apply_CashNotDerivativeProduct ______

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashNotDerivativeProduct>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashNotDerivativeProduct>

    @addApplyTool.DerivativeProduct(num=1)
    def test_apply_CashNotDerivativeProduct(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:20: NameError
---------------------------- Captured stdout call -----------------------------
切换保护罩
正在执行用例 test_apply_CashNotDerivativeProduct
name 'sys' is not defined 用例 test_apply_CashNotDerivativeProduct 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyDerivativeProduct.test_apply_CashisDerivativeProductNo _____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductNo>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductNo>

    @addApplyTool.DerivativeProduct(num=0, linknum=1)
    def test_apply_CashisDerivativeProductNo(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:62: NameError
---------------------------- Captured stdout call -----------------------------
切换保护罩
正在执行用例 test_apply_CashisDerivativeProductNo
name 'sys' is not defined 用例 test_apply_CashisDerivativeProductNo 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
____ Test_addApplyDerivativeProduct.test_apply_CashisDerivativeProductNone ____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductNone>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductNone>

    @addApplyTool.DerivativeProduct(num=0, linkTag=False)
    def test_apply_CashisDerivativeProductNone(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:34: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_CashisDerivativeProductNone
name 'sys' is not defined 用例 test_apply_CashisDerivativeProductNone 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
____ Test_addApplyDerivativeProduct.test_apply_CashisDerivativeProductyes _____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductyes>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_CashisDerivativeProductyes>

    @addApplyTool.DerivativeProduct(num=0, linknum=0)
    def test_apply_CashisDerivativeProductyes(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:48: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_CashisDerivativeProductyes
name 'sys' is not defined 用例 test_apply_CashisDerivativeProductyes 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
____ Test_addApplyDerivativeProduct.test_apply_MarginNotDerivativeProduct _____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginNotDerivativeProduct>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginNotDerivativeProduct>

    @addApplyTool.DerivativeProduct(num=1)
    def test_apply_MarginNotDerivativeProduct(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:76: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_MarginNotDerivativeProduct
name 'sys' is not defined 用例 test_apply_MarginNotDerivativeProduct 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
____ Test_addApplyDerivativeProduct.test_apply_MarginisDerivativeProductNo ____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductNo>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductNo>

    @addApplyTool.DerivativeProduct(num=0, linknum=1)
    def test_apply_MarginisDerivativeProductNo(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:118: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_MarginisDerivativeProductNo
name 'sys' is not defined 用例 test_apply_MarginisDerivativeProductNo 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_MarginisDerivativeProductNone ___

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductNone>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductNone>

    @addApplyTool.DerivativeProduct(num=0, linkTag=False)
    def test_apply_MarginisDerivativeProductNone(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:90: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_MarginisDerivativeProductNone
name 'sys' is not defined 用例 test_apply_MarginisDerivativeProductNone 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_MarginisDerivativeProductyes ____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductyes>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 {}".format(func.__name__))
        try:
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 断言错误,提交失败,输入衍生产品隐藏框后再次点击提交按钮
            # 输入衍生产品隐藏框
            self.applypage.buyProduct(num, linkTag, linknum)
            try:
                self.applypage.click_sublimeApply("提交")
                test_case.public.publicTool.publicTool.wait_LoadingModal(self)  # loading
                # 下拉选择是, 隐藏框填写
                if linkTag == False and num == 0:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-create', "表单没有停留在同一页")

                else:
                    self.assertEqual(
                        self.driver.current_url, 'http://eddid-bos-uat.ntdev.be/main/apply-list', "提交表单失败, 页面没有跳转")

            except AssertionError:
                # 断言失败, 数据提交失败
                # 查找是否有数据为空,并打印出为空的栏位
                self.applypage.apply_error()
                raise AssertionError("断言失败(可能是接口报错)")

            except Exception as e:
                raise e

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:436:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:406: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_MarginisDerivativeProductyes>

    @addApplyTool.DerivativeProduct(num=0, linknum=0)
    def test_apply_MarginisDerivativeProductyes(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:104: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 test_apply_MarginisDerivativeProductyes
name 'sys' is not defined 用例 test_apply_MarginisDerivativeProductyes 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_______ Test_addApplyDerivativeProduct.test_apply_PassDerivativeProduct _______

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_PassDerivativeProduct>

    def test_apply_PassDerivativeProduct(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:130: NameError
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_jointDerivativeProductDiffno ____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_jointDerivativeProductDiffno>

    def test_apply_jointDerivativeProductDiffno(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:228: NameError
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_jointDerivativeProductDiffyes ___

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_jointDerivativeProductDiffyes>

    def test_apply_jointDerivativeProductDiffyes(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:175: NameError
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_jointDerivativeProductsameno ____

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_jointDerivativeProductsameno>

    def test_apply_jointDerivativeProductsameno(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:202: NameError
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
___ Test_addApplyDerivativeProduct.test_apply_jointDerivativeProductsameyes ___

self = <test_case.addApply.test_addApplyDerivativeProduct.Test_addApplyDerivativeProduct testMethod=test_apply_jointDerivativeProductsameyes>

    def test_apply_jointDerivativeProductsameyes(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyDerivativeProduct.py:149: NameError
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyInvestmentTarget.test_apply_BuyProductInvestmentTarget _____

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_BuyProductInvestmentTarget>
args = (), kwargs = {}

    def wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            # 校验投资目标选择"利息/股息收入"是否会弹出提示框
            try:
                # 校验是否弹出提示框(判断是否可以点击确定按钮)
                alert_context = applypage.box_alert()
                assert alert_context.strip() in ["利息/股息收入"]

            except AssertionError:
                print("投资目标弹出提示框内容有误, 请确认!!!")

            except Exception as e:
                print("box_alert() 方法异常, 请确认!!!")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:518:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:499: in wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_BuyProductInvestmentTarget>

    @addApplyTool.InvestmentTarget
    def test_apply_BuyProductInvestmentTarget(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyInvestmentTarget.py:60: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_BuyProductInvestmentTarget
name 'sys' is not defined 用例 test_apply_BuyProductInvestmentTarget 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyInvestmentTarget.test_apply_LeveragedInvestmentTarget ______

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_LeveragedInvestmentTarget>
args = (), kwargs = {}

    def wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            # 校验投资目标选择"利息/股息收入"是否会弹出提示框
            try:
                # 校验是否弹出提示框(判断是否可以点击确定按钮)
                alert_context = applypage.box_alert()
                assert alert_context.strip() in ["利息/股息收入"]

            except AssertionError:
                print("投资目标弹出提示框内容有误, 请确认!!!")

            except Exception as e:
                print("box_alert() 方法异常, 请确认!!!")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:518:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:499: in wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_LeveragedInvestmentTarget>

    @addApplyTool.InvestmentTarget
    def test_apply_LeveragedInvestmentTarget(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyInvestmentTarget.py:46: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_LeveragedInvestmentTarget
name 'sys' is not defined 用例 test_apply_LeveragedInvestmentTarget 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
______ Test_addApplyInvestmentTarget.test_apply_futuresInvestmentTarget _______

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_futuresInvestmentTarget>
args = (), kwargs = {}

    def wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            # 校验投资目标选择"利息/股息收入"是否会弹出提示框
            try:
                # 校验是否弹出提示框(判断是否可以点击确定按钮)
                alert_context = applypage.box_alert()
                assert alert_context.strip() in ["利息/股息收入"]

            except AssertionError:
                print("投资目标弹出提示框内容有误, 请确认!!!")

            except Exception as e:
                print("box_alert() 方法异常, 请确认!!!")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:518:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:499: in wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyInvestmentTarget.Test_addApplyInvestmentTarget testMethod=test_apply_futuresInvestmentTarget>

    @addApplyTool.InvestmentTarget
    def test_apply_futuresInvestmentTarget(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyInvestmentTarget.py:31: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_futuresInvestmentTarget
name 'sys' is not defined 用例 test_apply_futuresInvestmentTarget 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
____________ Test_addApplyRequired.test_apply_MobileAuthentication ____________

self = <test_case.addApply.test_addApplyRequired.Test_addApplyRequired testMethod=test_apply_MobileAuthentication>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)  # 执行用例
        except AssertionError:
            # 捕捉断言失败异常AssertionError
            if way == "手机应用程式身份验证":
                # 输入银行名称
                self.applypage.send_appBankName()
                # 输入银行账户号码
                self.applypage.send_appBankAccount()
            if way == "电子签名认证":
                # 输入电子签名证书号码
                self.applypage.send_appcertificateNb()

            # 点击提交
            self.applySublime()

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:382:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:364: in inner_wrapper
    return func(self, *args, **kwargs)  # 执行用例
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRequired.Test_addApplyRequired testMethod=test_apply_MobileAuthentication>

    @addApplyTool.AccountOpeningWay(way="手机应用程式身份验证")
    def test_apply_MobileAuthentication(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRequired.py:21: NameError
---------------------------- Captured stdout call -----------------------------
name 'sys' is not defined 用例 test_apply_MobileAuthentication 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_______________ Test_addApplyRequired.test_apply_certificateNb ________________

self = <test_case.addApply.test_addApplyRequired.Test_addApplyRequired testMethod=test_apply_certificateNb>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)  # 执行用例
        except AssertionError:
            # 捕捉断言失败异常AssertionError
            if way == "手机应用程式身份验证":
                # 输入银行名称
                self.applypage.send_appBankName()
                # 输入银行账户号码
                self.applypage.send_appBankAccount()
            if way == "电子签名认证":
                # 输入电子签名证书号码
                self.applypage.send_appcertificateNb()

            # 点击提交
            self.applySublime()

        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:382:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:364: in inner_wrapper
    return func(self, *args, **kwargs)  # 执行用例
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRequired.Test_addApplyRequired testMethod=test_apply_certificateNb>

    @addApplyTool.AccountOpeningWay(way="电子签名认证")
    def test_apply_certificateNb(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRequired.py:34: NameError
---------------------------- Captured stdout call -----------------------------
name 'sys' is not defined 用例 test_apply_certificateNb 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
______ Test_addApplyRiskTolerance.test_apply_BuyProductRiskToleranceHigh ______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_BuyProductRiskToleranceHigh>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_BuyProductRiskToleranceHigh>

    @addApplyTool.RiskTolerance(num=0)
    def test_apply_BuyProductRiskToleranceHigh(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:121: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_BuyProductRiskToleranceHigh
name 'sys' is not defined 用例 test_apply_BuyProductRiskToleranceHigh 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
______ Test_addApplyRiskTolerance.test_apply_BuyProductRiskToleranceLow _______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_BuyProductRiskToleranceLow>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_BuyProductRiskToleranceLow>

    @addApplyTool.RiskTolerance(num=2)
    def test_apply_BuyProductRiskToleranceLow(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:93: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_BuyProductRiskToleranceLow
name 'sys' is not defined 用例 test_apply_BuyProductRiskToleranceLow 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyRiskTolerance.test_apply_BuyProductRiskToleranceMiddle _____

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_BuyProductRiskToleranceMiddle>

    def setUp(self):
        globals()["email"] = ""
>       self.driver = webdriver.Chrome(executable_path='chromedriver')

test_case\addApply\addApplyTool.py:16:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
D:\Python3.6\lib\site-packages\selenium\webdriver\chrome\webdriver.py:81: in __init__
    desired_capabilities=desired_capabilities)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:252: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D146F41828>
response = {'sessionId': '3b0a8d4092c29b752e2349a4b5010942', 'status': 100, 'value': {'message': 'chrome not reachable\n  (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: chrome not reachable
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException
______ Test_addApplyRiskTolerance.test_apply_LeveragedRiskToleranceHigh _______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceHigh>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceHigh>

    @addApplyTool.RiskTolerance(num=0)
    def test_apply_LeveragedRiskToleranceHigh(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:80: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_LeveragedRiskToleranceHigh
name 'sys' is not defined 用例 test_apply_LeveragedRiskToleranceHigh 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_______ Test_addApplyRiskTolerance.test_apply_LeveragedRiskToleranceLow _______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceLow>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceLow>

    @addApplyTool.RiskTolerance(num=2)
    def test_apply_LeveragedRiskToleranceLow(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:54: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_LeveragedRiskToleranceLow
name 'sys' is not defined 用例 test_apply_LeveragedRiskToleranceLow 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_____ Test_addApplyRiskTolerance.test_apply_LeveragedRiskToleranceMiddle ______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceMiddle>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_LeveragedRiskToleranceMiddle>

    @addApplyTool.RiskTolerance(num=1)
    def test_apply_LeveragedRiskToleranceMiddle(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:67: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_LeveragedRiskToleranceMiddle
name 'sys' is not defined 用例 test_apply_LeveragedRiskToleranceMiddle 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_______ Test_addApplyRiskTolerance.test_apply_futuresRiskToleranceHigh ________

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceHigh>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceHigh>

    @addApplyTool.RiskTolerance(num=0)
    def test_apply_futuresRiskToleranceHigh(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:162: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_futuresRiskToleranceHigh
name 'sys' is not defined 用例 test_apply_futuresRiskToleranceHigh 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
________ Test_addApplyRiskTolerance.test_apply_futuresRiskToleranceLow ________

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceLow>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceLow>

    @addApplyTool.RiskTolerance(num=2)
    def test_apply_futuresRiskToleranceLow(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:136: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_futuresRiskToleranceLow
name 'sys' is not defined 用例 test_apply_futuresRiskToleranceLow 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
______ Test_addApplyRiskTolerance.test_apply_futuresRiskToleranceMiddle _______

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceMiddle>
args = (), kwargs = {}

    def inner_wrapper(self, *args, **kwargs):
        print("正在执行用例 :", func.__name__)
        try:
            # import pdb; pdb.set_trace()
            return func(self, *args, **kwargs)
        except AssertionError:
            print("断言失败,进行装饰器校验")
            # 风险承受能力
            try:
                # 输入风险承受能力
                riskTolerance = self.applypage.riskTolerance(num)
                if num == 0:
                    # 风险承受能力选择为"高"
                    self.applySublime()

                # 勾选期货账户时, 风险提示允许为 "中" 风险
                if num == 1 and func.__name__.find("futuresRiskTolerance") != -1:
                    self.applySublime()

                else:
                    assert publicTool.box_alert().strip() in ["若阁下选择低或中风险，将不能买卖期货、杠杆式外汇、结构性产品及衍生产品"]
                    self.applySublime(Jump=False)

            except AttributeError:
                print("点击风险承受能力方法有异常, 请优化方法")
                raise AttributeError


        except Exception as e:
            # 查找出报错的位置
            print(e, "用例 {} 执行失败".format(func.__name__))
>           raise e

test_case\addApply\addApplyTool.py:482:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\addApply\addApplyTool.py:455: in inner_wrapper
    return func(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_case.addApply.test_addApplyRiskTolerance.Test_addApplyRiskTolerance testMethod=test_apply_futuresRiskToleranceMiddle>

    @addApplyTool.RiskTolerance(num=1)
    def test_apply_futuresRiskToleranceMiddle(self):
>       self.log.info("正在执行{}函数".format(sys._getframe().f_code.co_name))
E       NameError: name 'sys' is not defined

test_case\addApply\test_addApplyRiskTolerance.py:149: NameError
---------------------------- Captured stdout call -----------------------------
正在执行用例 : test_apply_futuresRiskToleranceMiddle
name 'sys' is not defined 用例 test_apply_futuresRiskToleranceMiddle 执行失败
------------------------------ Captured log call ------------------------------
addApplyTool.py             25 INFO     登录CRM
addApplyTool.py             27 INFO     点击开户列表
addApplyTool.py             32 INFO     点击新增按钮
addApplyTool.py             36 INFO     用例执行完成, 关闭quit
_________________ Test_createActivity.test_AllCreateActivity __________________

self = <test_createActivity.Test_createActivity object at 0x000001D147F76DD8>

    def test_AllCreateActivity(self):
        # 创建活动,全部字段
        # 活动日期
        self.activity.send_activityDate()
        # 活动时间
        self.activity.send_activityOpenTime()
        # 讲题
        self.activity.send_activityTopic()
        # 讲者
        self.activity.activitySpeaker()
        # 等级
        self.activity.activityLevel()
        # 地点
        self.activity.activityLocation()
        # 优惠活动
        self.activity.Promotions()
        # 大型活动
        self.activity.BigActivity()
        # 讲座举办地址图
        self.activity.addressMap()
        # 保存
        self.activity.primary()

        publicTool.box_alert(self)
        publicTool.wait_LoadingModal(self)
>       assert self.driver.current_url in "http://eddid-bos-uat.ntdev.be/main/activity-list", "创建活动失败"
E       AssertionError: 创建活动失败
E       assert 'http://eddid-bos-uat.ntdev.be/main/seminar-create' in 'http://eddid-bos-uat.ntdev.be/main/activity-list'
E        +  where 'http://eddid-bos-uat.ntdev.be/main/seminar-create' = <selenium.webdriver.chrome.webdriver.WebDriver (session="2a110bb8314f4c9b17c45cf029514190")>.current_url
E        +    where <selenium.webdriver.chrome.webdriver.WebDriver (session="2a110bb8314f4c9b17c45cf029514190")> = <test_createActivity.Test_createActivity object at 0x000001D147F76DD8>.driver

test_case\lead\test_createActivity.py:66: AssertionError
-------------------------- Captured stdout teardown ---------------------------
用例执行完成
___________________ Test_createActivity.test_RequiredCreate ___________________

self = <test_createActivity.Test_createActivity object at 0x000001D147F6B7B8>

    def test_RequiredCreate(self):
        # 创建活动,必填字段
        # 活动日期
        self.activity.send_activityDate()
        # 活动时间
        self.activity.send_activityOpenTime()
        # 讲题
        self.activity.send_activityTopic()
        # 保存提交
        self.activity.primary()
        publicTool.box_alert(self)
        publicTool.wait_LoadingModal(self)
>       assert self.driver.current_url in "http://eddid-bos-uat.ntdev.be/main/activity-list", "创建活动失败"
E       AssertionError: 创建活动失败
E       assert 'http://eddid-bos-uat.ntdev.be/main/seminar-create' in 'http://eddid-bos-uat.ntdev.be/main/activity-list'
E        +  where 'http://eddid-bos-uat.ntdev.be/main/seminar-create' = <selenium.webdriver.chrome.webdriver.WebDriver (session="705791d3b957642f2ee3d0ca2eb58455")>.current_url
E        +    where <selenium.webdriver.chrome.webdriver.WebDriver (session="705791d3b957642f2ee3d0ca2eb58455")> = <test_createActivity.Test_createActivity object at 0x000001D147F6B7B8>.driver

test_case\lead\test_createActivity.py:80: AssertionError
---------------------------- Captured stdout setup ----------------------------
切换保护罩
切换保护罩
-------------------------- Captured stdout teardown ---------------------------
用例执行完成
____________________________ Test_Login.test_login ____________________________

self = <PageElement.LoginPage.LoginPage object at 0x000001D147F683C8>
url = 'http://eddid-bos-uat.ntdev.be', pagetitle = 'Eddid', num = 0

    def browser(self, url, pagetitle, num = 0):
        # driver.get 保护罩,防止打开浏览器超时
        try:
            main_win = self.driver.current_window_handle #得到主窗口句柄

            if len(self.driver.window_handles) == 1 :
                # 如果只有一个窗口, 打开保护罩
                js='window.open("https://www.baidu.com");'
                self.driver.execute_script(js)  #此时焦点在新打开页面
                for handle in self.driver.window_handles:
                    if handle == main_win:
                        # print('保护罩WIN', handle, '\nMain', main_win)
                        self.driver.switch_to.window(handle)    #切换回主窗口

>           self.driver.get(url)

Commons\BasePage.py:50:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
url = 'http://eddid-bos-uat.ntdev.be'

    def get(self, url):
        """
        Loads a web page in the current browser session.
        """
>       self.execute(Command.GET, {'url': url})

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:333:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
driver_command = 'get'
params = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'url': 'http://eddid-bos-uat.ntdev.be'}

    def execute(self, driver_command, params=None):
        """
        Sends a command to be executed by a command.CommandExecutor.

        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.

        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        if self.session_id is not None:
            if not params:
                params = {'sessionId': self.session_id}
            elif 'sessionId' not in params:
                params['sessionId'] = self.session_id

        params = self._wrap_value(params)
        response = self.command_executor.execute(driver_command, params)
        if response:
>           self.error_handler.check_response(response)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D147F65978>
response = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'status': 21, 'value': {'message': 'timeout\n  (Session info: chrome...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: TimeoutException

During handling of the above exception, another exception occurred:

self = <PageElement.LoginPage.LoginPage object at 0x000001D147F683C8>
url = 'http://eddid-bos-uat.ntdev.be', pagetitle = 'Eddid', num = 1

    def browser(self, url, pagetitle, num = 0):
        # driver.get 保护罩,防止打开浏览器超时
        try:
            main_win = self.driver.current_window_handle #得到主窗口句柄

            if len(self.driver.window_handles) == 1 :
                # 如果只有一个窗口, 打开保护罩
                js='window.open("https://www.baidu.com");'
                self.driver.execute_script(js)  #此时焦点在新打开页面
                for handle in self.driver.window_handles:
                    if handle == main_win:
                        # print('保护罩WIN', handle, '\nMain', main_win)
                        self.driver.switch_to.window(handle)    #切换回主窗口

>           self.driver.get(url)

Commons\BasePage.py:50:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
url = 'http://eddid-bos-uat.ntdev.be'

    def get(self, url):
        """
        Loads a web page in the current browser session.
        """
>       self.execute(Command.GET, {'url': url})

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:333:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
driver_command = 'get'
params = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'url': 'http://eddid-bos-uat.ntdev.be'}

    def execute(self, driver_command, params=None):
        """
        Sends a command to be executed by a command.CommandExecutor.

        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.

        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        if self.session_id is not None:
            if not params:
                params = {'sessionId': self.session_id}
            elif 'sessionId' not in params:
                params['sessionId'] = self.session_id

        params = self._wrap_value(params)
        response = self.command_executor.execute(driver_command, params)
        if response:
>           self.error_handler.check_response(response)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D147F65978>
response = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'status': 21, 'value': {'message': 'timeout\n  (Session info: chrome...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: TimeoutException

During handling of the above exception, another exception occurred:

self = <PageElement.LoginPage.LoginPage object at 0x000001D147F683C8>
url = 'http://eddid-bos-uat.ntdev.be', pagetitle = 'Eddid', num = 2

    def browser(self, url, pagetitle, num = 0):
        # driver.get 保护罩,防止打开浏览器超时
        try:
            main_win = self.driver.current_window_handle #得到主窗口句柄

            if len(self.driver.window_handles) == 1 :
                # 如果只有一个窗口, 打开保护罩
                js='window.open("https://www.baidu.com");'
                self.driver.execute_script(js)  #此时焦点在新打开页面
                for handle in self.driver.window_handles:
                    if handle == main_win:
                        # print('保护罩WIN', handle, '\nMain', main_win)
                        self.driver.switch_to.window(handle)    #切换回主窗口

>           self.driver.get(url)

Commons\BasePage.py:50:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
url = 'http://eddid-bos-uat.ntdev.be'

    def get(self, url):
        """
        Loads a web page in the current browser session.
        """
>       self.execute(Command.GET, {'url': url})

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:333:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
driver_command = 'get'
params = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'url': 'http://eddid-bos-uat.ntdev.be'}

    def execute(self, driver_command, params=None):
        """
        Sends a command to be executed by a command.CommandExecutor.

        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.

        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        if self.session_id is not None:
            if not params:
                params = {'sessionId': self.session_id}
            elif 'sessionId' not in params:
                params['sessionId'] = self.session_id

        params = self._wrap_value(params)
        response = self.command_executor.execute(driver_command, params)
        if response:
>           self.error_handler.check_response(response)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D147F65978>
response = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'status': 21, 'value': {'message': 'timeout\n  (Session info: chrome...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: TimeoutException

During handling of the above exception, another exception occurred:

self = <PageElement.LoginPage.LoginPage object at 0x000001D147F683C8>
url = 'http://eddid-bos-uat.ntdev.be', pagetitle = 'Eddid', num = 3

    def browser(self, url, pagetitle, num = 0):
        # driver.get 保护罩,防止打开浏览器超时
        try:
            main_win = self.driver.current_window_handle #得到主窗口句柄

            if len(self.driver.window_handles) == 1 :
                # 如果只有一个窗口, 打开保护罩
                js='window.open("https://www.baidu.com");'
                self.driver.execute_script(js)  #此时焦点在新打开页面
                for handle in self.driver.window_handles:
                    if handle == main_win:
                        # print('保护罩WIN', handle, '\nMain', main_win)
                        self.driver.switch_to.window(handle)    #切换回主窗口

>           self.driver.get(url)

Commons\BasePage.py:50:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
url = 'http://eddid-bos-uat.ntdev.be'

    def get(self, url):
        """
        Loads a web page in the current browser session.
        """
>       self.execute(Command.GET, {'url': url})

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:333:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ab8f068bef03752ca3fabdf078527e9")>
driver_command = 'get'
params = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'url': 'http://eddid-bos-uat.ntdev.be'}

    def execute(self, driver_command, params=None):
        """
        Sends a command to be executed by a command.CommandExecutor.

        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.

        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        if self.session_id is not None:
            if not params:
                params = {'sessionId': self.session_id}
            elif 'sessionId' not in params:
                params['sessionId'] = self.session_id

        params = self._wrap_value(params)
        response = self.command_executor.execute(driver_command, params)
        if response:
>           self.error_handler.check_response(response)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D147F65978>
response = {'sessionId': '0ab8f068bef03752ca3fabdf078527e9', 'status': 21, 'value': {'message': 'timeout\n  (Session info: chrome...ver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass

        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']

        screen = None
        if 'screen' in value:
            screen = value['screen']

        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: timeout
E         (Session info: chrome=76.0.3809.87)
E         (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64)

D:\Python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: TimeoutException

During handling of the above exception, another exception occurred:

self = <test_case.test_Login.Test_Login testMethod=test_login>

    def test_login(self):
>       publicTool.LoginCRM(self)

test_case\test_Login.py:29:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_case\public\publicTool.py:29: in LoginCRM
    login_page.open()
Commons\BasePage.py:73: in open
    self.browser(self.base_url, self.pagetitle)
Commons\BasePage.py:63: in browser
    self.browser(url, pagetitle, num+1)
Commons\BasePage.py:63: in browser
    self.browser(url, pagetitle, num+1)
Commons\BasePage.py:63: in browser
    self.browser(url, pagetitle, num+1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <PageElement.LoginPage.LoginPage object at 0x000001D147F683C8>
url = 'http://eddid-bos-uat.ntdev.be', pagetitle = 'Eddid', num = 3

    def browser(self, url, pagetitle, num = 0):
        # driver.get 保护罩,防止打开浏览器超时
        try:
            main_win = self.driver.current_window_handle #得到主窗口句柄

            if len(self.driver.window_handles) == 1 :
                # 如果只有一个窗口, 打开保护罩
                js='window.open("https://www.baidu.com");'
                self.driver.execute_script(js)  #此时焦点在新打开页面
                for handle in self.driver.window_handles:
                    if handle == main_win:
                        # print('保护罩WIN', handle, '\nMain', main_win)
                        self.driver.switch_to.window(handle)    #切换回主窗口

            self.driver.get(url)
            self.driver.maximize_window()
            assert self.on_page(pagetitle), u"打开开页面失败 %s" % url

        except TimeoutException:
            if num == 3:
                print(TimeoutException)
>               raise TimeoutException
E               selenium.common.exceptions.TimeoutException: Message: None

Commons\BasePage.py:57: TimeoutException
---------------------------- Captured stdout call -----------------------------
切换保护罩
切换保护罩
切换保护罩
<class 'selenium.common.exceptions.TimeoutException'>
结束driver
-- generated html file: file://D:\Test\NewType\NewType\Eddid_CRM\report.html --
============================== warnings summary ===============================
test_case\lead\test_createLead.py:6
  D:\Test\NewType\NewType\Eddid_CRM\test_case\lead\test_createLead.py:6: PytestWarning: cannot collect test class 'Test_createLead' because it has a __init__ constructor
    class Test_createLead():

test_case/test_Login.py::Test_Login::test_login
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test01_Process1_sales_to_cs2
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test02_Process1_cs2_to_ro
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test03_Process1_cliff
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test04_Process1_don
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test05_Process1_aaron
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess01.py::Test_reviewProcess01::test07_Process1_ops_to_success
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess02.py::Test_reviewProcess2::test1_Process2_cs1tocs2
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess02.py::Test_reviewProcess2::test2_Process2_cs2toro
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess02.py::Test_reviewProcess2::test3_Process2_cliff
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess02.py::Test_reviewProcess2::test4_Process2_don
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess02.py::Test_reviewProcess2::test7_Process2_opstosuccess
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess03.py::Test_reviewProcess3::test_01_Process3_cs1torefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess03.py::Test_reviewProcess3::test_04_Process3_refusetucs2
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess04.py::Test_reviewProcess4::test_01_Process4_cs2torefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess04.py::Test_reviewProcess4::test_02_Process4_refusetucs2
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess05.py::Test_reviewProcess5::test_01_Process5_aaron
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess05.py::Test_reviewProcess5::test_02_Process5_roadmin
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess06.py::Test_reviewProcess6::test_02_Process6_cstocliff
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess07.py::Test_reviewProcess7::test_01_Process7_cliff
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess07.py::Test_reviewProcess7::test_02_Process7_cstoRefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess08.py::Test_reviewProcess8::test_01_Process8_don
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess08.py::Test_reviewProcess8::test_02_Process8_cstodon
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess09.py::Test_reviewProcess9::test_02_Process9_cstoRefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess10.py::Test_reviewProcess10::test_01_Process10_aaron
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess10.py::Test_reviewProcess10::test_02_Process10_cstodon
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess11.py::Test_reviewProcess11::test_02_Process11_cstoRefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess12.py::Test_reviewProcess12::test_01_Process12_gold
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/ReviewProcess/test_reviewProcess12.py::Test_reviewProcess12::test_02_Process12_cstogold
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess13.py::Test_reviewProcess13::test_02_Process13_cstoRefuse
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/ReviewProcess/test_reviewProcess14.py::Test_reviewProcess14::test_01_Process14_roadmin
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))
  D:\Test\NewType\NewType\Eddid_CRM\Commons\PyMongo.py:65: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.
    self.log.info("%s 表符合查询条件%s 的数据有%s 条" %(collection, query, result.count()))

test_case/addApply/test_addApplyAllNotEmpty.py::Test_addApplyAllNotEmpty::test_apply_IndividualAll
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/addApply/test_addApplyAllNotEmpty.py::Test_addApplyAllNotEmpty::test_apply_IndividualNotEmpty
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/addApply/test_addApplyAllNotEmpty.py::Test_addApplyAllNotEmpty::test_apply_JointNotEmpty
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/addApply/test_addApplyDerivativeProduct.py::Test_addApplyDerivativeProduct::test_apply_CashNotDerivativeProduct
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/addApply/test_addApplyDerivativeProduct.py::Test_addApplyDerivativeProduct::test_apply_CashisDerivativeProductNo
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/lead/test_createActivity.py::Test_createActivity::test_RequiredCreate
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/lead/test_createActivity.py::Test_createActivity::test_NonCreateActivity
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

test_case/lead/test_createActivity.py::Test_Login::test_login
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)
  D:\Test\NewType\NewType\Eddid_CRM\Commons\BasePage.py:62: DeprecationWarning: use driver.switch_to.window instead
    self.driver.switch_to_window(handle)

-- Docs: https://docs.pytest.org/en/latest/warnings.html
====== 43 failed, 25 passed, 3 xfailed, 124 warnings in 2989.26 seconds =======
[Finished in 2990.0s]